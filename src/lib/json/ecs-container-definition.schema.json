{
	"$schema": "https://json-schema.org/draft-07/schema#",
	"$id": "ecs-container-definition",
	"title": "ECS Container Definition",
	"description": "Container definitions are used in task definitions to describe the different containers that are launched as part of a task.",
	"additionalProperties": false,
	"properties": {

		"command": {
			"description": "The command that's passed to the container. This parameter maps to Cmd in the Create a container section of the Docker Remote API and the COMMAND parameter to docker run. For more information, see https://docs.docker.com/engine/reference/builder/#cmd. If there are multiple arguments, each argument is a separated string in the array.",
			"type": "array",
			"items": {
				"type": "string"
			}
		},

		"cpu": {
			"type": "integer"
		},

		"dependsOn": {
			"type": "array",
			"items": {
				"$ref": "#/definitions/container-dependency"
			}
		},

		"disableNetworking": {
			"type": "boolean",
			"default": false
		},

		"dnsSearchDomains": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},

		"dnsServers": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},

		"dockerLabels": {
			"type": "object",

			"additionalItems": {
				"type": "string"
			}
		},

		"dockerSecurityOptions": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},

		"entryPoint": {
			"description": "The entry point that's passed to the container. This parameter maps to Entrypoint in the Create a container section of the Docker Remote API and the --entrypoint option to docker run. For more information, see https://docs.docker.com/engine/reference/builder/#entrypoint.",
			"type": "array",
			"items": {
				"type": "string"
			}
		},

		"environment": {
			"description": "The environment variables to pass to a container. This parameter maps to Env in the Create a container section of the Docker Remote API and the --env option to docker run.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/key-value-pair"
			}
		},

		"environmentFiles": {
			"description": "A list of files containing the environment variables to pass to a container. This parameter maps to the --env-file option to docker run.\n\nYou can specify up to ten environment files. The file must have a .env file extension. Each line in an environment file contains an environment variable in VARIABLE=VALUE format. Lines beginning with # are treated as comments and are ignored. For more information about the environment variable file syntax, see Declare default environment variables in file.\n\nIf there are environment variables specified using the environment parameter in a container definition, they take precedence over the variables contained within an environment file. If multiple environment files are specified that contain the same variable, they're processed from the top down. We recommend that you use unique variable names. For more information, see Specifying Environment Variables in the Amazon Elastic Container Service Developer Guide.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/environment-file"
			}
		},

		"essential": {
			"description": "If the essential parameter of a container is marked as true, and that container fails or stops for any reason, all other containers that are part of the task are stopped. If the essential parameter of a container is marked as false, its failure doesn't affect the rest of the containers in a task. If this parameter is omitted, a container is assumed to be essential.\n\nAll tasks must have at least one essential container. If you have an application that's composed of multiple containers, group containers that are used for a common purpose into components, and separate the different components into multiple task definitions. For more information, see Application Architecture in the Amazon Elastic Container Service Developer Guide.",
			"type": "boolean"
		},

		"extraHosts": {
			"description": "A list of hostnames and IP address mappings to append to the /etc/hosts file on the container. This parameter maps to ExtraHosts in the Create a container section of the Docker Remote API and the --add-host option to docker run.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/host-entry"
			}
		},

		"firelensConfiguration": {
			"description": "The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see Custom Log Routing in the Amazon Elastic Container Service Developer Guide.",
			"$ref": "#/definitions/firelens-configuration"
		},

		"healthCheck": {
			"description": "The container health check command and associated configuration parameters for the container. This parameter maps to HealthCheck in the Create a container section of the Docker Remote API and the HEALTHCHECK parameter of docker run.",
			"$ref": "#/definitions/health-check"
		},

		"hostname": {
			"description": "The hostname to use for your container. This parameter maps to Hostname in the Create a container section of the Docker Remote API and the --hostname option to docker run.",
			"type": "string"
		},

		"image": {
			"description": "The image used to start a container. This string is passed directly to the Docker daemon. By default, images in the Docker Hub registry are available. Other repositories are specified with either repository-url/image:tag or repository-url/image@digest . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the Create a container section of the Docker Remote API and the IMAGE parameter of docker run.\n\nWhen a new task starts, the Amazon ECS container agent pulls the latest version of the specified image and tag for the container to use. However, subsequent updates to a repository image aren't propagated to already running tasks.\n\nImages in Amazon ECR repositories can be specified by either using the full registry/repository:tag or registry/repository@digest. For example, 012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>:latest or 012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE.\n\nImages in official repositories on Docker Hub use a single name (for example, ubuntu or mongo).\n\nImages in other repositories on Docker Hub are qualified with an organization name (for example, amazon/amazon-ecs-agent).\n\nImages in other online repositories are qualified further by a domain name (for example, quay.io/assemblyline/ubuntu).",
			"type": "string"
		},

		"interactive": {
			"description": "When this parameter is true, you can deploy containerized applications that require stdin or a tty to be allocated. This parameter maps to OpenStdin in the Create a container section of the Docker Remote API and the --interactive option to docker run.",
			"type": "boolean"
		},

		"links": {
			"description": "The links parameter allows containers to communicate with each other without the need for port mappings. This parameter is only supported if the network mode of a task definition is bridge. The name:internalName construct is analogous to name:alias in Docker links. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. For more information about linking Docker containers, go to Legacy container links in the Docker documentation. This parameter maps to Links in the Create a container section of the Docker Remote API and the --link option to docker run.",
			"type": "array",
			"items": {
				"type": "string"
			}
		},

		"linuxParameters": {
			"description": "Linux-specific modifications that are applied to the container, such as Linux kernel capabilities. For more information see KernelCapabilities.",
			"$ref": "#/definitions/linux-parameters"
		},

		"logConfiguration": {
			"description": "The log configuration specification for the container.\n\nThis parameter maps to LogConfig in the Create a container section of the Docker Remote API and the --log-driver option to docker run. By default, containers use the same logging driver that the Docker daemon uses. However the container can use a different logging driver than the Docker daemon by specifying a log driver with this parameter in the container definition. To use a different logging driver for a container, the log system must be configured properly on the container instance (or on a different log server for remote logging options). For more information about the options for different supported log drivers, see Configure logging drivers in the Docker documentation.\n\nThis parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'",
			"$ref": "#/definitions/log-configuration"
		},

		"memory": {
			"description": "The amount (in MiB) of memory to present to the container. If your container attempts to exceed the memory specified here, the container is killed. The total amount of memory reserved for all containers within a task must be lower than the task memory value, if one is specified. This parameter maps to Memory in the Create a container section of the Docker Remote API and the --memory option to docker run.\n\nIf using the Fargate launch type, this parameter is optional.\n\nIf using the EC2 launch type, you must specify either a task-level memory value or a container-level memory value. If you specify both a container-level memory and memoryReservation value, memory must be greater than memoryReservation. If you specify memoryReservation, then that value is subtracted from the available memory resources for the container instance where the container is placed. Otherwise, the value of memory is used.\n\nThe Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a container. So, don't specify less than 6 MiB of memory for your containers.\n\nThe Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a container. So, don't specify less than 4 MiB of memory for your containers.",
			"type": "integer"
		},

		"mountPoints": {
			"description": "The mount points for data volumes in your container.\n\nThis parameter maps to Volumes in the Create a container section of the Docker Remote API and the --volume option to docker run.\n\nWindows containers can mount whole directories on the same drive as $env:ProgramData. Windows containers can't mount directories on a different drive, and mount point can't be across drives.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/mount-point"
			}
		},

		"name": {
			"description": "The name of a container. If you're linking multiple containers together in a task definition, the name of one container can be entered in the links of another container to connect the containers. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to name in the Create a container section of the Docker Remote API and the --name option to docker run",
			"type": "string"
		},

		"portMappings": {
			"description": "The list of port mappings for the container. Port mappings allow containers to access ports on the host container instance to send or receive traffic.\n\nFor task definitions that use the awsvpc network mode, only specify the containerPort. The hostPort can be left blank or it must be the same value as the containerPort.\n\nPort mappings on Windows use the NetNAT gateway address rather than localhost. There's no loopback for port mappings on Windows, so you can't access a container's mapped port from the host itself.\n\nThis parameter maps to PortBindings in the Create a container section of the Docker Remote API and the --publish option to docker run. If the network mode of a task definition is set to none, then you can't specify port mappings. If the network mode of a task definition is set to host, then host ports must either be undefined or they must match the container port in the port mapping.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/port-mapping"
			}
		},

		"privileged": {
			"description": "When this parameter is true, the container is given elevated privileges on the host container instance (similar to the root user). This parameter maps to Privileged in the Create a container section of the Docker Remote API and the --privileged option to docker run.",
			"type": "boolean"
		},

		"pseudoTerminal": {
			"description": "When this parameter is true, a TTY is allocated. This parameter maps to Tty in the Create a container section of the Docker Remote API and the --tty option to docker run.",
			"type": "boolean"
		},

		"readonlyRootFilesystem": {
			"description": "When this parameter is true, the container is given read-only access to its root file system. This parameter maps to ReadonlyRootfs in the Create a container section of the Docker Remote API and the --read-only option to docker run.",
			"type": "boolean"
		},

		"repositoryCredentials": {
			"description": "The private repository authentication credentials to use.",
			"$ref": "#/definitions/repository-credentials"
		},

		"resourceRequirements": {
			"description": "The type and amount of a resource to assign to a container. The only supported resource is a GPU.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/resource-requirements"
			}
		},

		"secrets": {
			"description": "The secrets to pass to the container. For more information, see Specifying Sensitive Data in the Amazon Elastic Container Service Developer Guide.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/secret"
			}
		},

		"startTimeout": {
			"description": "Time duration (in seconds) to wait before giving up on resolving dependencies for a container. For example, you specify two containers in a task definition with containerA having a dependency on containerB reaching a COMPLETE, SUCCESS, or HEALTHY status. If a startTimeout value is specified for containerB and it doesn't reach the desired status within that time then containerA gives up and not start. This results in the task transitioning to a STOPPED state. ...",
			"type": "integer"
		},

		"stopTimeout": {
			"description": "Time duration (in seconds) to wait before the container is forcefully killed if it doesn't exit normally on its own.\n\nFor tasks using the Fargate launch type, the task or service requires the following platforms:\n\nLinux platform version 1.3.0 or later.\n\nWindows platform version 1.0.0 or later.\n\nThe max stop timeout value is 120 seconds and if the parameter is not specified, the default value of 30 seconds is used. ...",
			"type": "integer"
		},

		"systemControls": {
			"description": "A list of namespaced kernel parameters to set in the container. This parameter maps to Sysctls in the Create a container section of the Docker Remote API and the --sysctl option to docker run.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/system-control"
			}
		},

		"ulimits": {
			"description": "A list of ulimits to set in the container. If a ulimit value is specified in a task definition, it overrides the default values set by Docker. This parameter maps to Ulimits in the Create a container section of the Docker Remote API and the --ulimit option to docker run. Valid naming values are displayed in the Ulimit data type.\n\nAmazon ECS tasks hosted on AWS Fargate use the default resource limit values set by the operating system with the exception of the nofile resource limit parameter which AWS Fargate overrides. The nofile resource limit sets a restriction on the number of open files that a container can use. The default nofile soft limit is 1024 and hard limit is 4096.\n\nThis parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'",
			"type": "array",
			"items": {
				"$ref": "#/definitions/ulimit"
			}
		},

		"user": {
			"description": "The user to use inside the container. This parameter maps to User in the Create a container section of the Docker Remote API and the --user option to docker run.",
			"type": "string"
		},

		"volumesFrom": {
			"description": "Data volumes to mount from another container. This parameter maps to VolumesFrom in the Create a container section of the Docker Remote API and the --volumes-from option to docker run.",
			"type": "array",
			"items": {
				"$ref": "#/definitions/volume-from"
			}
		},

		"workingDirectory": {
			"description": "The working directory to run commands inside the container in. This parameter maps to WorkingDir in the Create a container section of the Docker Remote API and the --workdir option to docker run.",
			"type": "string"
		}

	},
	"definitions": {

		"container-dependency": {
			"type": "object",
			"required": [
				"condition",
				"containerName"
			],
			"additionalProperties": false,
			"properties": {

				"condition": {
					"type": "string",
					"enum": [
						"START",
						"COMPLETE",
						"SUCCESS",
						"HEALTHY"
					]
				},

				"containerName": {
					"description": "The name of a container.",
					"type": "string"
				}

			}
		},

		"key-value-pair": {
			"description": "A key-value pair object.",
			"type": "object",
			"additionalProperties": false,
			"properties": {

				"name": {
					"description": "The name of the key-value pair. For environment variables, this is the name of the environment variable.",
					"type": "string"
				},

				"value": {
					"description": "The value of the key-value pair. For environment variables, this is the value of the environment variable.",
					"type": "string"
				}

			}
		},

		"environment-file": {
			"type": "object",
			"required": [
				"type",
				"value"
			],
			"additionalProperties": false,
			"properties": {

				"type": {
					"description": "The file type to use. The only supported value is s3.",
					"type": "string",
					"enum": [
						"s3"
					]
				},

				"value": {
					"description": "The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment variable file.",
					"type": "string"
				}

			}
		},

		"host-entry": {
			"description": "Hostnames and IP address entries that are added to the /etc/hosts file of a container via the extraHosts parameter of its ContainerDefinition.",
			"type": "object",
			"required": [
				"hostname",
				"ipAddress"
			],
			"additionalProperties": false,
			"properties": {

				"hostname": {
					"description": "The hostname to use in the /etc/hosts entry.",
					"type": "string"
				},

				"ipAddress": {
					"description": "The IP address to use in the /etc/hosts entry.",
					"type": "string"
				}

			}
		},

		"firelens-configuration": {
			"description": "The FireLens configuration for the container. This is used to specify and configure a log router for container logs. For more information, see Custom log routing in the Amazon Elastic Container Service Developer Guide.",
			"type": "object",
			"required": [
				"type"
			],
			"additionalProperties": false,
			"properties": {

				"options": {
					"type": "object",
					"additionalProperties": {
						"type": "string"
					}
				},

				"type": {
					"description": "The log router to use. The valid values are fluentd or fluentbit.",
					"type": "string",
					"enum": [
						"fluentd",
						"fluentbit"
					]
				}

			}
		},

		"health-check": {
			"description": "An object representing a container health check. Health check parameters that are specified in a container definition override any Docker health checks that exist in the container image (such as those specified in a parent image or from the image's Dockerfile). ...",
			"type": "object",
			"required": [
				"command"
			],
			"additionalProperties": false,
			"properties": {

				"command": {
					"description": "A string array representing the command that the container runs to determine if it is healthy. The string array must start with CMD to execute the command arguments directly, or CMD-SHELL to run the command with the container's default shell.\n\nWhen you use the AWS Management Console JSON panel, the AWS Command Line Interface, or the APIs, enclose the list of commands in brackets.\n\n[ \"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\" ]\n\nYou don't need to include the brackets when you use the AWS Management Console.\n\n\"CMD-SHELL\", \"curl -f http://localhost/ || exit 1\"\n\nAn exit code of 0 indicates success, and non-zero exit code indicates failure. For more information, see HealthCheck in the Create a container section of the Docker Remote API.",
					"type": "array",
					"items": {
						"type": "string"
					}
				},

				"interval": {
					"description": "The time period in seconds between each health check execution. You may specify between 5 and 300 seconds. The default value is 30 seconds.",
					"type": "integer"
				},

				"retries": {
					"description": "The number of times to retry a failed health check before the container is considered unhealthy. You may specify between 1 and 10 retries. The default value is 3.",
					"type": "integer"
				},

				"startPeriod": {
					"description": "The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. You can specify between 0 and 300 seconds. By default, the startPeriod is disabled.",
					"type": "integer"
				},

				"timeout": {
					"description": "The time period in seconds to wait for a health check to succeed before it is considered a failure. You may specify between 2 and 60 seconds. The default value is 5.",
					"type": "integer"
				}

			}
		},

		"linux-parameters": {
			"description": "Linux-specific options that are applied to the container, such as Linux KernelCapabilities.",
			"type": "object",
			"additionalProperties": false,
			"properties": {

				"capabilities": {
					"description": "The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.",
					"$ref": "#/definitions/kernel-capabilities"
				},

				"devices": {
					"description": "Any host devices to expose to the container. This parameter maps to Devices in the Create a container section of the Docker Remote API and the --device option to docker run.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/device"
					}
				},

				"initProcessEnabled": {
					"description": "Run an init process inside the container that forwards signals and reaps processes. This parameter maps to the --init option to docker run. This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'",
					"type": "boolean"
				},

				"maxSwap": {
					"description": "The total amount of swap memory (in MiB) a container can use. This parameter will be translated to the --memory-swap option to docker run where the value would be the sum of the container memory plus the maxSwap value.\n\nIf a maxSwap value of 0 is specified, the container will not use swap. Accepted values are 0 or any positive integer. If the maxSwap parameter is omitted, the container will use the swap configuration for the container instance it is running on. A maxSwap value must be set for the swappiness parameter to be used.",
					"type": "integer"
				},

				"sharedMemorySize": {
					"description": "The value for the size (in MiB) of the /dev/shm volume. This parameter maps to the --shm-size option to docker run.",
					"type": "integer"
				},

				"swappiness": {
					"description": "This allows you to tune a container's memory swappiness behavior. A swappiness value of 0 will cause swapping to not happen unless absolutely necessary. A swappiness value of 100 will cause pages to be swapped very aggressively. Accepted values are whole numbers between 0 and 100. If the swappiness parameter is not specified, a default value of 60 is used. If a value is not specified for maxSwap then this parameter is ignored. This parameter maps to the --memory-swappiness option to docker run.",
					"type": "integer"
				},

				"tmpfs": {
					"description": "The container path, mount options, and size (in MiB) of the tmpfs mount. This parameter maps to the --tmpfs option to docker run.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/tmpfs"
					}
				}

			}
		},

		"log-configuration": {
			"description": "The log configuration for the container. This parameter maps to LogConfig in the Create a container section of the Docker Remote API and the --log-driver option to docker run.\n\nBy default, containers use the same logging driver that the Docker daemon uses. However, the container might use a different logging driver than the Docker daemon by specifying a log driver configuration in the container definition. For more information about the options for different supported log drivers, see Configure logging drivers in the Docker documentation.\n\nUnderstand the following when specifying a log configuration for your containers.\n\nAmazon ECS currently supports a subset of the logging drivers available to the Docker daemon (shown in the valid values below). Additional log drivers may be available in future releases of the Amazon ECS container agent.\n\nThis parameter requires version 1.18 of the Docker Remote API or greater on your container instance.\n\nFor tasks that are hosted on Amazon EC2 instances, the Amazon ECS container agent must register the available logging drivers with the ECS_AVAILABLE_LOGGING_DRIVERS environment variable before containers placed on that instance can use these log configuration options. For more information, see Amazon ECS container agent configuration in the Amazon Elastic Container Service Developer Guide.\n\nFor tasks that are on AWS Fargate, because you don't have access to the underlying infrastructure your tasks are hosted on, any additional software needed must be installed outside of the task. For example, the Fluentd output aggregators or a remote host running Logstash to send Gelf logs to.",
			"type": "object",
			"required": [
				"logDriver"
			],
			"additionalProperties": false,
			"properties": {

				"logDriver": {
					"description": "The log driver to use for the container.\n\nFor tasks on AWS Fargate, the supported log drivers are awslogs, splunk, and awsfirelens.\n\nFor tasks hosted on Amazon EC2 instances, the supported log drivers are awslogs, fluentd, gelf, json-file, journald, logentries,syslog, splunk, and awsfirelens.\n\nFor more information about using the awslogs log driver, see Using the awslogs log driver in the Amazon Elastic Container Service Developer Guide.\n\nFor more information about using the awsfirelens log driver, see Custom log routing in the Amazon Elastic Container Service Developer Guide.",
					"type": "string",
					"enum": [
						"json-file",
						"syslog",
						"journald",
						"gelf",
						"fluentd",
						"awslogs",
						"splunk",
						"awsfirelens"
					]
				},

				"options": {
					"description": "The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'",
					"type": "object",
					"additionalProperties": {
						"type": "string"
					}
				},

				"secretOptions": {
					"description": "The secrets to pass to the log configuration. For more information, see Specifying sensitive data in the Amazon Elastic Container Service Developer Guide.",
					"type": "array",
					"items": {
						"$ref": "#/definitions/secret"
					}
				}

			}
		},

		"mount-point": {
			"additionalProperties": false
		},

		"port-mapping": {
			"description": "Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.\n\nIf you use containers in a task with the awsvpc or host network mode, specify the exposed ports using containerPort. The hostPort can be left blank or it must be the same value as the containerPort.\n\nAfter a task reaches the RUNNING status, manual and automatic host and container port assignments are visible in the networkBindings section of DescribeTasks API responses.",
			"type": "object",
			"additionalProperties": false,
			"properties": {

				"containerPort": {
					"description": "The port number on the container that's bound to the user-specified or automatically assigned host port.\n\nIf you use containers in a task with the awsvpc or host network mode, specify the exposed ports using containerPort.\n\nIf you use containers in a task with the bridge network mode and you specify a container port and not a host port, your container automatically receives a host port in the ephemeral port range. For more information, see hostPort. Port mappings that are automatically assigned in this way do not count toward the 100 reserved ports limit of a container instance.",
					"type": "integer"
				},

				"hostPort": {
					"description": "The port number on the container instance to reserve for your container.\n\nIf you use containers in a task with the awsvpc or host network mode, the hostPort can either be left blank or set to the same value as the containerPort.\n\nIf you use containers in a task with the bridge network mode, you can specify a non-reserved host port for your container port mapping, or you can omit the hostPort (or set it to 0) while specifying a containerPort and your container automatically receives a port in the ephemeral port range for your container instance operating system and Docker version.\n\nThe default ephemeral port range for Docker version 1.6.0 and later is listed on the instance under /proc/sys/net/ipv4/ip_local_port_range. If this kernel parameter is unavailable, the default ephemeral port range from 49153 through 65535 is used. Do not attempt to specify a host port in the ephemeral port range as these are reserved for automatic assignment. In general, ports below 32768 are outside of the ephemeral port range.\n\nThe default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the Amazon ECS container agent ports 51678-51680. Any host port that was previously specified in a running task is also reserved while the task is running. That is, after a task stops, the host port is released. The current reserved ports are displayed in the remainingResources of DescribeContainerInstances output. A container instance can have up to 100 reserved ports at a time. This number includes the default reserved ports. Automatically assigned ports aren't included in the 100 reserved ports quota.",
					"type": "integer"
				},

				"protocol": {
					"description": "The protocol used for the port mapping. Valid values are tcp and udp. The default is tcp.",
					"type": "string",
					"enum": [
						"tcp",
						"udp"
					]
				}

			}
		},

		"repository-credentials": {
			"additionalProperties": false
		},

		"resource-requirements": {
			"additionalProperties": false
		},

		"secret": {
			"description": "An object representing the secret to expose to your container. Secrets can be exposed to a container in the following ways:\n\nTo inject sensitive data into your containers as environment variables, use the secrets container definition parameter.\n\nTo reference sensitive information in the log configuration of a container, use the secretOptions container definition parameter.\n\nFor more information, see Specifying sensitive data in the Amazon Elastic Container Service Developer Guide.",
			"type": "object",
			"required": [
				"name",
				"valueFrom"
			],
			"additionalProperties": false,
			"properties": {

				"name": {
					"description": "The name of the secret.",
					"type": "string"
				},

				"valueFrom": {
					"description": "The secret to expose to the container. The supported values are either the full ARN of the AWS Secrets Manager secret or the full ARN of the parameter in the SSM Parameter Store.\n\nFor information about the require AWS Identity and Access Management permissions, see Required IAM permissions for Amazon ECS secrets (for Secrets Manager) or Required IAM permissions for Amazon ECS secrets (for Systems Manager Parameter store) in the Amazon Elastic Container Service Developer Guide.",
					"type": "string"
				}

			}
		},

		"system-control": {
			"additionalProperties": false
		},

		"ulimit": {
			"additionalProperties": false
		},

		"volume-from": {
			"additionalProperties": false
		},

		"kernel-capabilities": {
			"additionalProperties": false
		},

		"device": {
			"additionalProperties": false
		},

		"tmpfs": {
			"additionalProperties": false
		}

	}
}
